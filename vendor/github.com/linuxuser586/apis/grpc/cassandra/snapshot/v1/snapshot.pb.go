// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/cassandra/snapshot/v1/snapshot.proto

package v1 // import "github.com/linuxuser586/apis/grpc/cassandra/snapshot/v1"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import v1 "github.com/linuxuser586/apis/grpc/cassandra/nodetool/v1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Args      *v1.Args `protobuf:"bytes,1,opt,name=args" json:"args,omitempty"`
	Table     string   `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	KtList    string   `protobuf:"bytes,3,opt,name=kt_list,json=ktList,proto3" json:"kt_list,omitempty"`
	SkipFlush bool     `protobuf:"varint,4,opt,name=skip_flush,json=skipFlush,proto3" json:"skip_flush,omitempty"`
	Tag       string   `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	Keyspaces string   `protobuf:"bytes,6,opt,name=keyspaces,proto3" json:"keyspaces,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_snapshot_9a847269a44b137f, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetArgs() *v1.Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Request) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *Request) GetKtList() string {
	if m != nil {
		return m.KtList
	}
	return ""
}

func (m *Request) GetSkipFlush() bool {
	if m != nil {
		return m.SkipFlush
	}
	return false
}

func (m *Request) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Request) GetKeyspaces() string {
	if m != nil {
		return m.Keyspaces
	}
	return ""
}

type Response struct {
	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_snapshot_9a847269a44b137f, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "linuxuser586.cassandra.snapshot.v1.Request")
	proto.RegisterType((*Response)(nil), "linuxuser586.cassandra.snapshot.v1.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SnapshotterClient is the client API for Snapshotter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnapshotterClient interface {
	Snapshot(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type snapshotterClient struct {
	cc *grpc.ClientConn
}

func NewSnapshotterClient(cc *grpc.ClientConn) SnapshotterClient {
	return &snapshotterClient{cc}
}

func (c *snapshotterClient) Snapshot(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/linuxuser586.cassandra.snapshot.v1.Snapshotter/Snapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapshotterServer is the server API for Snapshotter service.
type SnapshotterServer interface {
	Snapshot(context.Context, *Request) (*Response, error)
}

func RegisterSnapshotterServer(s *grpc.Server, srv SnapshotterServer) {
	s.RegisterService(&_Snapshotter_serviceDesc, srv)
}

func _Snapshotter_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotterServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linuxuser586.cassandra.snapshot.v1.Snapshotter/Snapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotterServer).Snapshot(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Snapshotter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "linuxuser586.cassandra.snapshot.v1.Snapshotter",
	HandlerType: (*SnapshotterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Snapshot",
			Handler:    _Snapshotter_Snapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/cassandra/snapshot/v1/snapshot.proto",
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Args != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.Args.Size()))
		n1, err := m.Args.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Table) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.Table)))
		i += copy(dAtA[i:], m.Table)
	}
	if len(m.KtList) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.KtList)))
		i += copy(dAtA[i:], m.KtList)
	}
	if m.SkipFlush {
		dAtA[i] = 0x20
		i++
		if m.SkipFlush {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Tag) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	if len(m.Keyspaces) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.Keyspaces)))
		i += copy(dAtA[i:], m.Keyspaces)
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func encodeVarintSnapshot(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Args != nil {
		l = m.Args.Size()
		n += 1 + l + sovSnapshot(uint64(l))
	}
	l = len(m.Table)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	l = len(m.KtList)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	if m.SkipFlush {
		n += 2
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	l = len(m.Keyspaces)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSnapshot(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	return n
}

func sovSnapshot(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSnapshot(x uint64) (n int) {
	return sovSnapshot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = &v1.Args{}
			}
			if err := m.Args.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KtList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KtList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipFlush", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipFlush = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyspaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyspaces = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSnapshot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSnapshot
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSnapshot
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSnapshot(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSnapshot = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSnapshot   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protos/cassandra/snapshot/v1/snapshot.proto", fileDescriptor_snapshot_9a847269a44b137f)
}

var fileDescriptor_snapshot_9a847269a44b137f = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xbd, 0x4e, 0xc3, 0x30,
	0x18, 0x8c, 0xe9, 0xbf, 0xbb, 0x20, 0x0b, 0x89, 0xa8, 0x82, 0xa8, 0xca, 0x14, 0xa9, 0xc8, 0x51,
	0x8b, 0x80, 0x0e, 0x2c, 0x30, 0x30, 0xb1, 0x10, 0x36, 0x96, 0xca, 0x4d, 0x4d, 0x1a, 0x25, 0x8d,
	0x83, 0x3f, 0x27, 0x82, 0xb7, 0xe0, 0xa5, 0x90, 0x18, 0x3b, 0x32, 0xa2, 0xf6, 0x45, 0x50, 0xdc,
	0x26, 0x20, 0x01, 0x82, 0xed, 0xbe, 0xd3, 0xdd, 0xf9, 0xf3, 0xd9, 0x78, 0x90, 0x4a, 0xa1, 0x04,
	0xb8, 0x3e, 0x03, 0x60, 0xc9, 0x4c, 0x32, 0x17, 0x12, 0x96, 0xc2, 0x5c, 0x28, 0x37, 0x1f, 0x56,
	0x98, 0x6a, 0x15, 0xb1, 0xe3, 0x30, 0xc9, 0x1e, 0x33, 0xe0, 0xf2, 0x64, 0x7c, 0x4a, 0x2b, 0x0b,
	0xad, 0x64, 0xf9, 0xb0, 0xf7, 0x3d, 0x30, 0x11, 0x33, 0xae, 0x84, 0x88, 0x8b, 0xc0, 0x12, 0x6f,
	0x02, 0xed, 0x17, 0x84, 0x5b, 0x1e, 0x7f, 0xc8, 0x38, 0x28, 0x72, 0x8e, 0xeb, 0x4c, 0x06, 0x60,
	0xa2, 0x3e, 0x72, 0xba, 0x23, 0x87, 0xfe, 0x72, 0x56, 0x95, 0x90, 0x0f, 0xe9, 0x85, 0x0c, 0xc0,
	0xd3, 0x2e, 0xb2, 0x87, 0x1b, 0x8a, 0x4d, 0x63, 0x6e, 0xee, 0xf4, 0x91, 0xd3, 0xf1, 0x36, 0x03,
	0xd9, 0xc7, 0xad, 0x48, 0x4d, 0xe2, 0x10, 0x94, 0x59, 0xd3, 0x7c, 0x33, 0x52, 0xd7, 0x21, 0x28,
	0x72, 0x88, 0x31, 0x44, 0x61, 0x3a, 0xb9, 0x8f, 0x33, 0x98, 0x9b, 0xf5, 0x3e, 0x72, 0xda, 0x5e,
	0xa7, 0x60, 0xae, 0x0a, 0x82, 0xec, 0xe2, 0x9a, 0x62, 0x81, 0xd9, 0xd0, 0x9e, 0x02, 0x92, 0x03,
	0xdc, 0x89, 0xf8, 0x13, 0xa4, 0xcc, 0xe7, 0x60, 0x36, 0x35, 0xff, 0x49, 0xd8, 0x63, 0xdc, 0xf6,
	0x38, 0xa4, 0x22, 0x01, 0x4e, 0x08, 0xae, 0xfb, 0x62, 0xc6, 0xf5, 0x3d, 0x1a, 0x9e, 0xc6, 0xc4,
	0xc4, 0xad, 0x05, 0x07, 0x60, 0x41, 0xb9, 0x5f, 0x39, 0x8e, 0x72, 0xdc, 0xbd, 0xdd, 0xb6, 0xa7,
	0xb8, 0x24, 0x01, 0x6e, 0x97, 0x23, 0x19, 0xd0, 0xbf, 0xeb, 0xa6, 0xdb, 0xf6, 0x7a, 0x47, 0xff,
	0x13, 0x6f, 0x76, 0xb4, 0x8d, 0xcb, 0x9b, 0xd7, 0x95, 0x85, 0x96, 0x2b, 0x0b, 0xbd, 0xaf, 0x2c,
	0xf4, 0xbc, 0xb6, 0x8c, 0xe5, 0xda, 0x32, 0xde, 0xd6, 0x96, 0x71, 0x77, 0x16, 0x84, 0x6a, 0x9e,
	0x4d, 0xa9, 0x2f, 0x16, 0xee, 0xd7, 0x4c, 0x97, 0xa5, 0x21, 0xb8, 0x81, 0x4c, 0xfd, 0x9f, 0x3f,
	0xcb, 0xb4, 0xa9, 0xdf, 0xf4, 0xf8, 0x23, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x46, 0x68, 0xc4, 0x53,
	0x02, 0x00, 0x00,
}
