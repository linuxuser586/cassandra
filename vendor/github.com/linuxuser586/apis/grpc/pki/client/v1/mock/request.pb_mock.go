// Code generated by MockGen. DO NOT EDIT.
// Source: grpc/pki/client/v1/request.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/linuxuser586/apis/grpc/pki/client/v1"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockClientServiceClient is a mock of ClientServiceClient interface
type MockClientServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceClientMockRecorder
}

// MockClientServiceClientMockRecorder is the mock recorder for MockClientServiceClient
type MockClientServiceClientMockRecorder struct {
	mock *MockClientServiceClient
}

// NewMockClientServiceClient creates a new mock instance
func NewMockClientServiceClient(ctrl *gomock.Controller) *MockClientServiceClient {
	mock := &MockClientServiceClient{ctrl: ctrl}
	mock.recorder = &MockClientServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientServiceClient) EXPECT() *MockClientServiceClientMockRecorder {
	return m.recorder
}

// NewCert mocks base method
func (m *MockClientServiceClient) NewCert(ctx context.Context, in *v1.CertRequest, opts ...grpc.CallOption) (*v1.CertResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewCert", varargs...)
	ret0, _ := ret[0].(*v1.CertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCert indicates an expected call of NewCert
func (mr *MockClientServiceClientMockRecorder) NewCert(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCert", reflect.TypeOf((*MockClientServiceClient)(nil).NewCert), varargs...)
}

// MockClientServiceServer is a mock of ClientServiceServer interface
type MockClientServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceServerMockRecorder
}

// MockClientServiceServerMockRecorder is the mock recorder for MockClientServiceServer
type MockClientServiceServerMockRecorder struct {
	mock *MockClientServiceServer
}

// NewMockClientServiceServer creates a new mock instance
func NewMockClientServiceServer(ctrl *gomock.Controller) *MockClientServiceServer {
	mock := &MockClientServiceServer{ctrl: ctrl}
	mock.recorder = &MockClientServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientServiceServer) EXPECT() *MockClientServiceServerMockRecorder {
	return m.recorder
}

// NewCert mocks base method
func (m *MockClientServiceServer) NewCert(arg0 context.Context, arg1 *v1.CertRequest) (*v1.CertResponse, error) {
	ret := m.ctrl.Call(m, "NewCert", arg0, arg1)
	ret0, _ := ret[0].(*v1.CertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCert indicates an expected call of NewCert
func (mr *MockClientServiceServerMockRecorder) NewCert(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCert", reflect.TypeOf((*MockClientServiceServer)(nil).NewCert), arg0, arg1)
}
